#Problem BA2D
#Given: Integers k and t, followed by a collection of strings Dna.
#Return: A collection of strings BestMotifs resulting from running GreedyMotifSearch(Dna, k, t). If at any step you find more than one Profile-most probable k-mer in a given string, use the one occurring first.

# 1. Find the porobability of each k-mer in the string 

def Probability (string, matrix):
    Probable= 1 #Assign the probability to 1
    for i in range (len(string)):
        if string [i]== 'A':
            Probable= Probable * matrix [0][i] #Multiply the value with probability of A in the 1st row and i column
        if string [i]== 'C':
            Probable= Probable * matrix [1][i] #Multiply the value with probability of C in the 2nd row and i column
        if string [i]== 'G':
            Probable= Probable * matrix [2][i] #Multiply the value with probability of G in the 3rd row and i column
        if string [i]== 'T':
            Probable= Probable * matrix [3][i] #Multiply the value with probability of T in the 4th row and i column
    return Probable

# 2. Find the most probable k-mer

def MostProbableK_mer(string, k, matrix):
    sequence = {}
    for i in range(len(string) - k + 1):
        sequence[string[i:i + k]] = Probability(string[i:i + k], matrix)
    max_key = sorted(sequence.items(), key=lambda x:x[1], reverse=True)[0][0]
    return max_key

# 3. Find the score

def Score(Motifs):
    score = 0
    for i in range(len(Motifs[0])):
        j = [motif[i] for motif in Motifs]
        score += (len(j) - max(j.count("A"), j.count("C"), j.count("T"), j.count("G")))
    return score

# 4. Apply Greedy Motif Search 

def GreedyMotifSearch(Dna, k, t):
    # BestMotifs ← motif matrix formed by first k-mers in each string from Dna
    BestMotifs = [dna[:k] for dna in Dna]
    # for each k-mer Motif in the first string from Dna
    for k_mer in [Dna[0][i:i+k] for i in range(len(Dna[0])-k+1)]:
        # Motif1 ← Motif
        Motifs = [k_mer]
        # for i = 2 to t
        for i in range(1, t):
            # form Profile from motifs Motif1, …, Motifi - 1
            motifs = Motifs[:i]
            # Motifi ← Profile-most probable k-mer in the i-th string in Dna
            matrix = []
            for n in ["A", "C", "G", "T"]:
                mat = []
                for j in range(k):
                    mm = [m[j] for m in motifs]
                    mat.append(mm.count(n)/len(motifs))
                matrix.append(mat)
            # Motifs ← (Motif1, …, Motift)    
            Motifs.append(MostProbableK_mer(Dna[i], k, matrix))
        # print(Motifs)
        # if Score(Motifs) < Score(BestMotifs), BestMotifs ← Motifs
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs

output =GreedyMotifSearch (['GTCCCGTGTCGAATTGGTCTAGTGGGGCAACGCAAGCCCCTGAATCTTGTGTTAGGGTCGCTACTACACACGGCAGCAGCGCAGTTAAAGACCTAGACACCTGGGGGAGATCAACCATATGAAACCACGGGAATACACTTGCACCTTTCGGGTCAA',
'GTAGACTATCGGAAATATACCTCGGAGGCTGGTCACGCGTCTGAGGGACGTTGAACCTAAGATTAAGAAGGTTATGCGCCTAAAAAGGAGGTTGGACCACTGGCGTTCTATTTACCCATATATTTCTCAAAATAGCATGGATTAGCTAATCGGTGC',
'TACCTGCCGGGCCCTAGGTCAGATATCCAAAATGCGAACGCACCAATTTTTCCCCAGGAACGATTATACTCGACCGGCAGATGCTCGGGGTAAAGCCCATCACGAGATGCGGCTGCGGGATAACGGAACGTGAGCGAATGAGGCTTCATACCTCAA',
'CTTAGTTGTCCAAGGGCTCCAATGGTGGCCGGCGGATACTCGATCTACTGTCTCGTGCGTAATCTATTCAATCCACCTAGTACGAGGGTGGGGAATTGATTGTGCCATAAGGTCTAATTCGGGGCCAGTTCGCATGTTAATGTTCCCTCTGTGGGA',
'AAGGCCGAGAGTACCACCCGTAAAGACGAACTTCATAAACTGTGTGACGGTATTTCCGGAAAAATCTTAACGACTTCTCGTCGTTGTTTATATCTGCGGGTCATATACTCGCCTGCGGGAAAATAAGTACGACTAAGGCTTATTGAAATTGACCAT',
'ACCAAAAGCACACGAGACTGCGTAAATTCCTCGGGTGTTGCAGGGAGGGAGCATTTCTATCGTTGCCTTTGCCACAGCTCTCCGTGGAGCGCGTCGCCCTCTGGGGGAAAATGGCTTTCCTGACATCTGGCGAAAACTTAATACTATCGGGGCTGT',
'TGCCGTGCACCATTAAAGTAAAATCAATCATATCGGTGGAAAACACTAGTGCCCCGGTCAGGTGCCCCGATTACTTAATAGGGAGGCTTCGGTCAACCGGCTGTGGGATCTGGCTTCAGATTTCTTCATCTTCGAGTGTACCACTTGAGGTTAGGC',
'CGCAAATAGAGCAGGGCACTCCCAGTGGCGTCCACGCTAATACTGCATTCGTCCCGGACATGAATGACTAGGGCGCCGTACTTAGTTATAGCCGCATCCAACTGTCTCATGATGGGGTTATATCTTAGACTCACGCCTGCGGGAGTTAGCGCATGT',
'AAAGCACCTCAGCCCCAGGAGTATTATAAAATTTTGCGGGGATCAGATATGGACCCCATTATTCATGGCCTTATTCTATAAAGGGGCGGTAATAAGCGCCCTAATGAAGTCACTGTTTCGACGACTGCGGGATATCCTTATACCCGCTGACTCGCG',
'ACTCTCCGCTTGCGTTTTTTATCCAATCGACCAGACACGACGCTTGGCTAAAAGAAAGAAGCGGGCAAATAACCTCCTGAGGGATTCACCGAAATCATGCTGAGTGTGGGGCTTCTTTAGGATCCTATACAGCTGCCATAGCAATAAGGCGCACAG',
'AAATAGCTTGGTAAGGAATTAAACCGCGGCAATATTCGATTGTGAGCTATTCGCCCACACTGTGCACTGTCCCACACTGAAACCCAGTTGAGGATGATCCCCCGAGAAAATCCGGTTACACCGGCTGGGGGATTCTTGTAGGGGACTTCACATCGT',
'GCGTGCTTGGACATTGCGCGTAAGCAGTCTATAGAAAATCCCCAATTGGTTGCTTCTCTGACAGCTGCGGGAGAGCGAAGCCGCCGACCACTTCCCCGGTGCCACGTTTAATAAACCCAGGCCCATTAATGTTTCAGCACGACTGTCTTTACGCAC',
'TCCCCTGAGGGAGGTGCGAGATGACGAGCTTGCTCAAGTGAGTTTGCTAGCGGATTCTTAGATGCTAGTTATTGTAACACGGGACTCAAGTTTCTGATGCGGACGTGCTTCCCCCTAGACTCAGAGTCAAGATAGTCCGCCATGAATTTTACGACA',
'AAAGAGTGCACCCCCCTACGCGCATTTATGAGTCCATATGAGCGCGGGGATCATGACTCGAAACAAGGGGAATACAAATCGTGCTGCCTCACCATACGGGGGTTCTGACCGACTGCGGGATCCGCGATAATTCACGTGTTGGGGAATGTTAGCGTT',
'CCAGCGATCCCGGAGGGGAAAACTGATAGGGACTAACAGACATTTAGTTAGGGGAAACGCGGCTTTTGCGTTCGTAATGCTCCATTTCCCCACAGATGGTTGGTTGGGTCGACTGCGGGAAAGATTGCGGCTTACCTGCCCTAAGTCTAGGCGTTC',
'ACCCGGGTCGAAAACACTGTTGTGTTGTAAGAGCCTCTAAACCGGTGTGATCGACCAACTTTCATGCTTGCCACGCGGTCTAACCCGCATCGTTCCTCGTCTGAGGGAGTACACAAGAGCGCGTGTGTTGATTAGTCTGGAGGTAATGAGATAAAT',
'CGCTAATCCGACGATACTCGTAAGGATGAAGGGACGCCTGACACCCTGTTCAAGCTCCTCCGAAGTGGAGTTAGATCATCATTTTCTTCTGAGGGACAAGTTTAAATGCGAGAGCGGTCCATATTCAGAGATTCCCCTTTTGCTGAAGAAATAAAA',
'AGCCCCCCTTAGTTATATGGTTATTCTTAGACGTTGTTGTATAAAGCACTCAACCGTTGTAAATATCTTACACATGTGGCCACGTCGACTGAGGGAAAGACGTCAGGCTACAGCCCATTTATGCTGAGTAGCGATTGCGGGACGGCGGAACAATTG',
'ACGGATGGGTCGACAACTGGGGGAACAACCACAGCGTCTATGCTAAGGCGACTATTACCCAGGAGGGAGATGCAGCTTGTTGCTGACGCAACTGTAGCCAGCATATGCTCCCATCTAGTCTTTCGTTATGCTCAGTTGTAATAGTGTGTGGCTAGG',
'AGGCTCTATTAATTGGAGCGCCCCTTAGTTCATCGGGCAATGTCTGTTATTCAAGCGCGGCTCTTACTTAAGTCCATGACTGGCACATTTCCTAAAGGCGTGAGGACCGCTTCTGCGGGACTTCATCCCCTGGGACAGAAGCCTTCTACAAGTCCT',
'TATAGCTGGCGCCCGGCTGTGGGATCAATTAAAAAAAACTGGCCTGGTAGTGTCTGAAATCGTGATTAACTTTGCCCGCTCGCCACTCTAGTACTAGCAAACCCTGAGTTCAAACCCTCTCTTCGAAGGTCGCTGGTGGACTGACGCAGAGTAAAG',
'AGTAGCGCATTAGCGACAACTTACCTGCCGCCCAATGCGCGTCACATCTCCTTAAGGGTTATAAGGGTTGAGCGGGCCACCCCTTTGTTACCCCTGGATCAAGGGACATGGTGCGAGATCCGGAAAAAACTTCCAACTGTGGGACCCCGCCTGGTT',
'CTCTGAATTAAGCTGGCATTGGGCTTAGGACCTTTACCGCTATACGGGACTGAGCTTATTGTTCAGCGCGACTGGGGATTCTCACTGTACCATCTCGCTTCTGTGGGAATTCGCATTTCTAGACCGACATCGCCAGATCCCAAAATATACGGTGAA',
'GAGACAAGCCAAGATCTATCCAAATTACGGGCATCCGGAATGCATAAGACGTCTGCGGGAGCAACGCTATGGATACCTCTCAAATCAAGGTGATTATTGTCAAATAGCGGTTCCACGGTGAGTAAAATAGAAACGGCAGGCCAGAACTGTATGTGT',
'AGGAGTGCTGCAAAAAATGCACCTAGCTTTAACGATTAGCCCTCCAGTACCGCTGCGGGAAGGACAAGCCAAGAACTACTACTGAACGGCTACGGCGCGCCGTCGCGGCGCGTATAGTCATAAGGAGTACAGACGAATAGATCGGTGCCCGCCCAG'], 12, 25)
for item in output:
    print(item,end=' ')
